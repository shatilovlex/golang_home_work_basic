// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: query.sql

package db

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const CreateOrder = `-- name: CreateOrder :one
INSERT INTO pg_storage.shop.orders (user_id, order_date, total_amount)
VALUES ($1, $2, $3) returning id
`

type CreateOrderParams struct {
	UserID      *int32           `db:"user_id" json:"user_id"`
	OrderDate   pgtype.Timestamp `db:"order_date" json:"order_date"`
	TotalAmount *float64         `db:"total_amount" json:"total_amount"`
}

func (q *Queries) CreateOrder(ctx context.Context, arg CreateOrderParams) (int32, error) {
	row := q.db.QueryRow(ctx, CreateOrder, arg.UserID, arg.OrderDate, arg.TotalAmount)
	var id int32
	err := row.Scan(&id)
	return id, err
}

const CreateOrderProduct = `-- name: CreateOrderProduct :exec
INSERT INTO pg_storage.shop.orderProducts (order_id, product_id)
VALUES ($1, $2)
`

type CreateOrderProductParams struct {
	OrderID   int32 `db:"order_id" json:"order_id"`
	ProductID int32 `db:"product_id" json:"product_id"`
}

func (q *Queries) CreateOrderProduct(ctx context.Context, arg CreateOrderProductParams) error {
	_, err := q.db.Exec(ctx, CreateOrderProduct, arg.OrderID, arg.ProductID)
	return err
}

const ProductCreate = `-- name: ProductCreate :one
INSERT INTO pg_storage.shop.products (name, price)
VALUES ($1, $2) returning id
`

type ProductCreateParams struct {
	Name  *string  `db:"name" json:"name"`
	Price *float64 `db:"price" json:"price"`
}

func (q *Queries) ProductCreate(ctx context.Context, arg ProductCreateParams) (int32, error) {
	row := q.db.QueryRow(ctx, ProductCreate, arg.Name, arg.Price)
	var id int32
	err := row.Scan(&id)
	return id, err
}

const Products = `-- name: Products :many
select id, name, price from pg_storage.shop.products limit $1 offset $2
`

type ProductsParams struct {
	Limit  int64 `db:"limit" json:"limit"`
	Offset int64 `db:"offset" json:"offset"`
}

type ProductsRow struct {
	ID    int32    `db:"id" json:"id"`
	Name  *string  `db:"name" json:"name"`
	Price *float64 `db:"price" json:"price"`
}

func (q *Queries) Products(ctx context.Context, arg ProductsParams) ([]*ProductsRow, error) {
	rows, err := q.db.Query(ctx, Products, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []*ProductsRow{}
	for rows.Next() {
		var i ProductsRow
		if err := rows.Scan(&i.ID, &i.Name, &i.Price); err != nil {
			return nil, err
		}
		items = append(items, &i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const UpdateProduct = `-- name: UpdateProduct :one
update pg_storage.shop.products set name = $2, price = $3 where id = $1 returning id
`

type UpdateProductParams struct {
	ID    int32    `db:"id" json:"id"`
	Name  *string  `db:"name" json:"name"`
	Price *float64 `db:"price" json:"price"`
}

func (q *Queries) UpdateProduct(ctx context.Context, arg UpdateProductParams) (int32, error) {
	row := q.db.QueryRow(ctx, UpdateProduct, arg.ID, arg.Name, arg.Price)
	var id int32
	err := row.Scan(&id)
	return id, err
}

const UpdateUserName = `-- name: UpdateUserName :one
update pg_storage.shop.users set name = $2 where id = $1 returning id
`

type UpdateUserNameParams struct {
	ID   int32   `db:"id" json:"id"`
	Name *string `db:"name" json:"name"`
}

func (q *Queries) UpdateUserName(ctx context.Context, arg UpdateUserNameParams) (int32, error) {
	row := q.db.QueryRow(ctx, UpdateUserName, arg.ID, arg.Name)
	var id int32
	err := row.Scan(&id)
	return id, err
}

const UserCreate = `-- name: UserCreate :one
INSERT INTO pg_storage.shop.users (name, email, password)
VALUES ($1, $2, $3) returning id
`

type UserCreateParams struct {
	Name     *string `db:"name" json:"name"`
	Email    *string `db:"email" json:"email"`
	Password *string `db:"password" json:"password"`
}

func (q *Queries) UserCreate(ctx context.Context, arg UserCreateParams) (int32, error) {
	row := q.db.QueryRow(ctx, UserCreate, arg.Name, arg.Email, arg.Password)
	var id int32
	err := row.Scan(&id)
	return id, err
}

const Users = `-- name: Users :many
select id, name, email, password from pg_storage.shop.users limit $1 offset $2
`

type UsersParams struct {
	Limit  int64 `db:"limit" json:"limit"`
	Offset int64 `db:"offset" json:"offset"`
}

type UsersRow struct {
	ID       int32   `db:"id" json:"id"`
	Name     *string `db:"name" json:"name"`
	Email    *string `db:"email" json:"email"`
	Password *string `db:"password" json:"password"`
}

func (q *Queries) Users(ctx context.Context, arg UsersParams) ([]*UsersRow, error) {
	rows, err := q.db.Query(ctx, Users, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []*UsersRow{}
	for rows.Next() {
		var i UsersRow
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Email,
			&i.Password,
		); err != nil {
			return nil, err
		}
		items = append(items, &i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
